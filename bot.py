import asyncio
from telethon import TelegramClient, events
import logging
from log import Log
from config import API_ID, API_HASH

# updates need not to crush
logging.basicConfig(format='[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s',
                    level=logging.WARNING)

# init logger
log = Log('log.txt')

# log in
client = TelegramClient('bot', API_ID, API_HASH)
log.log('Connected')

# code info
bot_username = 'WorldDogs_bot'
bot_zhaba = 'jabkvabot'

time_to_walk = 1
time_to_sleep = 1
time_to_eat = 12 * 3600 + 60    # 12 hours after code start
time_update_clan = 4 * 3600 + 60    # each hour
eat_counter = 2

clan_arena_check = True
busy_check = False
clan_check = False


# function to send messages
async def send(msgs, username=bot_username, delay=1):
    if isinstance(msgs, str):
        msgs = [msgs]

    for msg in msgs:
        await client.send_message(username, msg)
        log.log(msg)
        await asyncio.sleep(delay)


async def set_time():
    # set time to walk
    log.log('Went to set time for next walk')
    await send(['‚õ© –ì–æ—Ä–æ–¥—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞', 'üêæ –ü—Ä–æ–≥—É–ª–∫–∞', 'üå≤ –í –º—Ä–∞—á–Ω—ã—Ö –∑–µ–º–ª—è—Ö üå≤', '‚óÄÔ∏è –ù–∞–∑–∞–¥'])

    # set time to sleep and bonus
    log.log('Went to set time for next sleep')
    await send(['üèØ –ö–≤–∞—Ä—Ç–∞–ª –≥–µ—Ä–æ–µ–≤', 'üè† –î–æ–º –ì–µ—Ä–æ—è', 'üõè –ü–æ—Å–ø–∞—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚óÄÔ∏è –ù–∞–∑–∞–¥'])


# go for a walk
async def walk():
    await asyncio.sleep(time_to_walk)

    global busy_check
    while busy_check:
        await asyncio.sleep(60)

    busy_check = True
    log.log('Went for a walk')

    await send(['‚õ© –ì–æ—Ä–æ–¥—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞', 'üêæ –ü—Ä–æ–≥—É–ª–∫–∞'])
    await send('üå≤ –í –º—Ä–∞—á–Ω—ã—Ö –∑–µ–º–ª—è—Ö üå≤', delay=10)
    await send(['üêæ –ü—Ä–æ–≥—É–ª–∫–∞', 'üå≤ –í –º—Ä–∞—á–Ω—ã—Ö –∑–µ–º–ª—è—Ö üå≤', '‚óÄÔ∏è –ù–∞–∑–∞–¥'])

    busy_check = False
    await asyncio.create_task(walk())


# walk handler to set time for next walk
@client.on(events.NewMessage(from_users=bot_username, pattern=r'^–¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –≥—É–ª—è–ª!'))
async def walk_handler(event):
    msg = event.raw_text.split(':')[1:]

    global time_to_walk
    time_to_walk = sum([int(msg[i]) * 60**(2 - i) for i in range(len(msg))]) + 60

    log.log(f'Next walk in {time_to_walk} s')


# go to sleep and then get bonus
async def sleep_and_bonus():
    await asyncio.sleep(time_to_sleep)

    global busy_check
    while busy_check:
        await asyncio.sleep(60)

    busy_check = True
    log.log('Went to sleep and get daily bonus')

    await send(['üèØ –ö–≤–∞—Ä—Ç–∞–ª –≥–µ—Ä–æ–µ–≤', 'üè† –î–æ–º –ì–µ—Ä–æ—è'])
    await send('üõè –ü–æ—Å–ø–∞—Ç—å', delay=10)
    await send(['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'üè™ –¢–æ—Ä–≥–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª', 'üé≤ –ò–≥–æ—Ä–Ω—ã–π –¥–æ–º', 'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
                '‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚óÄÔ∏è –ù–∞–∑–∞–¥'])

    busy_check = False
    await asyncio.create_task(sleep_and_bonus())


# sleep handler for setting time for next sleep
@client.on(events.NewMessage(from_users=bot_username, pattern=r'^–¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–¥—ã—Ö–∞–ª!'))
async def sleep_handler(event):
    msg = event.raw_text.split(':')[1:]

    global time_to_sleep
    time_to_sleep = sum([int(msg[i]) * 60**(2 - i) for i in range(len(msg))]) + 60

    log.log(f'Next sleep in {time_to_sleep} s')


# go to eat
async def eat():
    await asyncio.sleep(time_to_eat)

    global busy_check
    while busy_check:
        await asyncio.sleep(60)

    busy_check = True

    global eat_counter
    await send(['üèØ –ö–≤–∞—Ä—Ç–∞–ª –≥–µ—Ä–æ–µ–≤', 'üè† –î–æ–º –ì–µ—Ä–æ—è', f'üçó –ü–µ—Ä–µ–∫—É—Å–∏—Ç—å (–û—Å—Ç–∞–ª–æ—Å—å {eat_counter} —Ä–∞–∑)'])
    await send(['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚óÄÔ∏è –ù–∞–∑–∞–¥'], delay=2)

    eat_counter = 1 if eat_counter == 2 else 1
    busy_check = False

    await asyncio.create_task(eat())


# clan arena
@client.on(events.NewMessage(from_users=bot_username, pattern=r'–ò–≥—Ä–æ–∫ .+ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –ø—Ä–∏–Ω—è—Ç—å'))
async def arena_handler(event):
    global clan_arena_check
    if clan_arena_check:
        clan_arena_check = False

        await asyncio.sleep(3)
        res = await event.click()
        if res.message is None:
            await asyncio.sleep(3600)     # sleep for 1 hour

        clan_arena_check = True


# busy check for dungeons
@client.on(events.NewMessage(from_users=bot_username, pattern=r'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ...'))
async def arena_handler(event):
    global busy_check
    busy_check = True


# busy check for dungeons
@client.on(events.NewMessage(from_users=bot_username, pattern=r'(–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏|–í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è|–û—Ç–º–µ–Ω–µ–Ω–æ!)'))
async def arena_handler(event):
    global busy_check
    busy_check = False


# busy check for arena
@client.on(events.NewMessage(from_users=bot_username, pattern=r'–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫:'))
async def arena_handler(event):
    global busy_check
    busy_check = True


# busy check for arena
@client.on(events.NewMessage(from_users=bot_username, pattern=r'(–ó–∞ –ø–æ–±–µ–¥—É —Ç—ã –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—à—å—Å—è|–ó–∞ —É—á–∞—Å—Ç–∏–µ —Ç—ã –ø–æ–ª—É—á–∏–ª)'))
async def arena_handler(event):
    global busy_check
    busy_check = False


# clan users updater
async def clan_update():
    await asyncio.sleep(time_update_clan)

    global busy_check
    while busy_check:
        await asyncio.sleep(60)
    busy_check = True

    global clan_check
    clan_check = True

    await send(['‚õ© –ì–æ—Ä–æ–¥—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞', 'üë• –ö–ª–∞–Ω–æ–≤–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å'])
    await asyncio.sleep(10)
    await send('‚óÄÔ∏è –ù–∞–∑–∞–¥')

    busy_check = False
    clan_check = False

    await asyncio.create_task(clan_update())


@client.on(events.NewMessage(from_users=bot_username, pattern=r'‚öîÔ∏è –ñ–∞–±–æ–¥–µ—Ä–∂–∞–≤–∞'))
async def walk_handler(event):
    if clan_check:
        await asyncio.sleep(1)
        await event.click()
        await asyncio.sleep(1)
        msg = await client.get_messages(bot_username, ids=event.message.id)
        await msg.forward_to(bot_zhaba)
        while not (await msg.buttons[0][1].click()).message:
            await asyncio.sleep(1)
            msg = await client.get_messages(bot_username, ids=event.message.id)
            await msg.forward_to(bot_zhaba)


async def main():
    await set_time()

    await asyncio.gather(
        walk(),
        sleep_and_bonus(),
        eat(),
        clan_update()
    )

with client:
    client.loop.run_until_complete(main())
    log.log('Disconnected')

